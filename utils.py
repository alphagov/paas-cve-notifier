import config
import os
import time
from datadog import initialize, api
from datadog.api.constants import CheckStatus
from datetime import datetime, date
from datetime import time as datetime_time


def get_string(item):
    """
    Parse an item, as a string.
    We might get different results.
    :param item:
    :return:
    """
    if isinstance(item, list):
        if len(item) > 0:
            return item[0].strip()
        else:
            return ''
    else:
        return item.strip()


def init_datadog():
    """
    Initialise the datadog instance.
    :return:
    """
    options = {
        'api_key': os.environ['DD_API_KEY'],
        'app_key': os.environ['DD_APP_KEY']
    }

    initialize(**options)


def timestamp(value):
    """
    Convert datetime object to timestamp.
    :param value:
    :return:
    """
    return (value - datetime.fromtimestamp(0)).total_seconds()


def midnight(value):
    """
    Get dates start of the day.
    :param value:
    :return:
    """
    return datetime.combine(value, datetime_time.min)


def event_exists(reference):
    """
    Check if the event exists in the Datadog database.
    :param reference:
    :return:
    """
    start_time = timestamp(midnight(date.today())) - config.CHECK_INTERVAL_SECONDS * 2
    end_time = time.time()

    tag = 'security_reference:{}'.format(reference.lower())
    events = api.Event.query(start=start_time, end=end_time, tags=[tag])['events']

    return len(events) > 0


def send_event(service, security_event):
    """
    Send a new event to Datadog.
    :param service:
    :param security_event:
    :return:
    """
    reference = security_event['reference']
    text = security_event['description'] + "\n\n" + security_event['url']
    tags = [
        'security_reference:{}'.format(reference.lower()),
        'service:{}'.format(service)
    ]

    api.Event.create(title=reference, text=text, tags=tags)


def report_health(status):
    """
    Send a custom check to the Datadog, defining the app is still up and running.
    :return:
    """
    init_datadog()

    check = 'cve.notifier.ok'
    host = 'cve-notifier'

    api.ServiceCheck.check(check=check, host_name=host, status=status, message='OK')


class Report(object):
    @staticmethod
    def critical():
        report_health(CheckStatus.CRITICAL)

    @staticmethod
    def ok():
        report_health(CheckStatus.OK)

    @staticmethod
    def warning():
        report_health(CheckStatus.WARNING)
